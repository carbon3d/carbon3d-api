# coding: utf-8

"""
    Carbon DLS API

    Welcome to the Carbon DLS API docs!   # noqa: E501

    The version of the OpenAPI document: 0.4.6
    Contact: api-list@carbon3d.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from carbon3d.configuration import Configuration


class JobPartAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'part_uuid': 'str',
        'status': 'str',
        'failure_reason': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'part_uuid': 'part_uuid',
        'status': 'status',
        'failure_reason': 'failure_reason'
    }

    def __init__(self, uuid=None, part_uuid=None, status=None, failure_reason=None, local_vars_configuration=None):  # noqa: E501
        """JobPartAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._part_uuid = None
        self._status = None
        self._failure_reason = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if part_uuid is not None:
            self.part_uuid = part_uuid
        if status is not None:
            self.status = status
        if failure_reason is not None:
            self.failure_reason = failure_reason

    @property
    def uuid(self):
        """Gets the uuid of this JobPartAllOf.  # noqa: E501


        :return: The uuid of this JobPartAllOf.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this JobPartAllOf.


        :param uuid: The uuid of this JobPartAllOf.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def part_uuid(self):
        """Gets the part_uuid of this JobPartAllOf.  # noqa: E501


        :return: The part_uuid of this JobPartAllOf.  # noqa: E501
        :rtype: str
        """
        return self._part_uuid

    @part_uuid.setter
    def part_uuid(self, part_uuid):
        """Sets the part_uuid of this JobPartAllOf.


        :param part_uuid: The part_uuid of this JobPartAllOf.  # noqa: E501
        :type: str
        """

        self._part_uuid = part_uuid

    @property
    def status(self):
        """Gets the status of this JobPartAllOf.  # noqa: E501

        PartJob status:   * `waiting` - PartJob is waiting to run.   * `model_program_running` - PartJob is running provided model program.   * `build_prep_waiting` - PartJob is waiting for build preparation step.   * `failed` - PartJob failed.   # noqa: E501

        :return: The status of this JobPartAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobPartAllOf.

        PartJob status:   * `waiting` - PartJob is waiting to run.   * `model_program_running` - PartJob is running provided model program.   * `build_prep_waiting` - PartJob is waiting for build preparation step.   * `failed` - PartJob failed.   # noqa: E501

        :param status: The status of this JobPartAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["waiting", "model_program_running", "build_prep_waiting", "failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def failure_reason(self):
        """Gets the failure_reason of this JobPartAllOf.  # noqa: E501

        PartJob failure reason (only present when status == `failed`):   * `unauthorized` - The request was unauthorized.   * `model_program_run` - The request failed while running a model program.   * `bad_request` - The request was malformed.   * `other` - PartJob has failed for any other reason.   # noqa: E501

        :return: The failure_reason of this JobPartAllOf.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this JobPartAllOf.

        PartJob failure reason (only present when status == `failed`):   * `unauthorized` - The request was unauthorized.   * `model_program_run` - The request failed while running a model program.   * `bad_request` - The request was malformed.   * `other` - PartJob has failed for any other reason.   # noqa: E501

        :param failure_reason: The failure_reason of this JobPartAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["unauthorized", "model_program_run", "bad_request", "other"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and failure_reason not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `failure_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(failure_reason, allowed_values)
            )

        self._failure_reason = failure_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobPartAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobPartAllOf):
            return True

        return self.to_dict() != other.to_dict()
