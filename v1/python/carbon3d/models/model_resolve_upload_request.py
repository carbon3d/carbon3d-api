# coding: utf-8

"""
    Carbon DLS API

    Welcome to the Carbon DLS API docs!   # noqa: E501

    The version of the OpenAPI document: 0.4.16
    Contact: api-list@carbon3d.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from carbon3d.configuration import Configuration


class ModelResolveUploadRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filename': 'str',
        'model_etag': 'str',
        'model_uuid': 'str',
        'external_id': 'str'
    }

    attribute_map = {
        'filename': 'filename',
        'model_etag': 'model_etag',
        'model_uuid': 'model_uuid',
        'external_id': 'external_id'
    }

    def __init__(self, filename=None, model_etag=None, model_uuid=None, external_id=None, local_vars_configuration=None):  # noqa: E501
        """ModelResolveUploadRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filename = None
        self._model_etag = None
        self._model_uuid = None
        self._external_id = None
        self.discriminator = None

        self.filename = filename
        self.model_etag = model_etag
        self.model_uuid = model_uuid
        if external_id is not None:
            self.external_id = external_id

    @property
    def filename(self):
        """Gets the filename of this ModelResolveUploadRequest.  # noqa: E501

        Filename of the model  # noqa: E501

        :return: The filename of this ModelResolveUploadRequest.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ModelResolveUploadRequest.

        Filename of the model  # noqa: E501

        :param filename: The filename of this ModelResolveUploadRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filename is None:  # noqa: E501
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def model_etag(self):
        """Gets the model_etag of this ModelResolveUploadRequest.  # noqa: E501

        Presigned upload response member. Returned by AWS.  # noqa: E501

        :return: The model_etag of this ModelResolveUploadRequest.  # noqa: E501
        :rtype: str
        """
        return self._model_etag

    @model_etag.setter
    def model_etag(self, model_etag):
        """Sets the model_etag of this ModelResolveUploadRequest.

        Presigned upload response member. Returned by AWS.  # noqa: E501

        :param model_etag: The model_etag of this ModelResolveUploadRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_etag is None:  # noqa: E501
            raise ValueError("Invalid value for `model_etag`, must not be `None`")  # noqa: E501

        self._model_etag = model_etag

    @property
    def model_uuid(self):
        """Gets the model_uuid of this ModelResolveUploadRequest.  # noqa: E501

        Model UUID to be uploaded.  # noqa: E501

        :return: The model_uuid of this ModelResolveUploadRequest.  # noqa: E501
        :rtype: str
        """
        return self._model_uuid

    @model_uuid.setter
    def model_uuid(self, model_uuid):
        """Sets the model_uuid of this ModelResolveUploadRequest.

        Model UUID to be uploaded.  # noqa: E501

        :param model_uuid: The model_uuid of this ModelResolveUploadRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `model_uuid`, must not be `None`")  # noqa: E501

        self._model_uuid = model_uuid

    @property
    def external_id(self):
        """Gets the external_id of this ModelResolveUploadRequest.  # noqa: E501

        External id provided by user  # noqa: E501

        :return: The external_id of this ModelResolveUploadRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ModelResolveUploadRequest.

        External id provided by user  # noqa: E501

        :param external_id: The external_id of this ModelResolveUploadRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelResolveUploadRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelResolveUploadRequest):
            return True

        return self.to_dict() != other.to_dict()
