# coding: utf-8

"""
    Carbon DLS API

    Welcome to the Carbon DLS API docs!   # noqa: E501

    The version of the OpenAPI document: 0.4.16
    Contact: api-list@carbon3d.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from carbon3d.configuration import Configuration


class PrintDataQa(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'print_id': 'str',
        'printer_id': 'str',
        'total_slices': 'str',
        'cassette_name': 'str',
        'estimated_print_time__ms': 'str',
        'resin_exposure_compensation': 'str',
        'base_exposure_multiplier': 'str',
        'heater_setpoint__c': 'str',
        'printer_serial': 'str',
        'project_id': 'str',
        'print_number': 'str',
        'software_version': 'str',
        'printer_name': 'str',
        'ffb_enabled_print': 'str',
        'hardware_profile': 'str',
        'cassette_serial': 'str',
        'window_serial': 'str',
        'platform_serial': 'str',
        'resin_name': 'str',
        'blackline__um': 'str',
        'estimated_consumed_resin_volume__ml': 'str',
        'minimum_required_resin_volume__ml': 'str',
        'script_name': 'str',
        'project_name': 'str',
        'print_finished_status': 'str',
        'print_alerts': 'str',
        'started_date_time': 'str',
        'finished_date_time': 'str',
        'total_time__min': 'str',
        'move_time__min': 'str',
        'exposure_time_total__min': 'str',
        'total_delay_time__min': 'str',
        'light_engine_intensity__m_w_cm2': 'str',
        'current_to_light_engine__m_a': 'str',
        'avg_o2_partial_pressure_at_window__': 'str',
        'avg_o2_concentration__': 'str',
        'avg_o2_flow__ml_min': 'str',
        'estimated_resin_volume__ml': 'str',
        'slice_thickness__um': 'str',
        'build_height__mm': 'str',
        'created_at': 'str',
        'peak_wavelength__nm': 'str',
        'resin_alpha': 'str',
        'resin_dc': 'str',
        'resin_fc': 'str',
        'resin_viscosity': 'str',
        'light_engine_turned_on': 'str'
    }

    attribute_map = {
        'print_id': 'Print ID',
        'printer_id': 'Printer ID',
        'total_slices': 'Total Slices',
        'cassette_name': 'Cassette Name',
        'estimated_print_time__ms': 'Estimated Print Time (ms)',
        'resin_exposure_compensation': 'Resin Exposure Compensation',
        'base_exposure_multiplier': 'Base Exposure Multiplier',
        'heater_setpoint__c': 'Heater Setpoint (C)',
        'printer_serial': 'Printer Serial',
        'project_id': 'Project ID',
        'print_number': 'Print Number',
        'software_version': 'Software Version',
        'printer_name': 'Printer Name',
        'ffb_enabled_print': 'FFB Enabled Print',
        'hardware_profile': 'Hardware Profile',
        'cassette_serial': 'Cassette Serial',
        'window_serial': 'Window Serial',
        'platform_serial': 'Platform Serial',
        'resin_name': 'Resin Name',
        'blackline__um': 'Blackline (um)',
        'estimated_consumed_resin_volume__ml': 'Estimated Consumed Resin Volume (ml)',
        'minimum_required_resin_volume__ml': 'Minimum Required Resin Volume (ml)',
        'script_name': 'Script Name',
        'project_name': 'Project Name',
        'print_finished_status': 'Print Finished Status',
        'print_alerts': 'Print Alerts',
        'started_date_time': 'Started Date-Time',
        'finished_date_time': 'Finished Date-Time',
        'total_time__min': 'Total Time (min)',
        'move_time__min': 'Move Time (min)',
        'exposure_time_total__min': 'Exposure Time Total (min)',
        'total_delay_time__min': 'Total Delay Time (min)',
        'light_engine_intensity__m_w_cm2': 'Light Engine Intensity (mW/cm2)',
        'current_to_light_engine__m_a': 'Current to Light Engine (mA)',
        'avg_o2_partial_pressure_at_window__': 'Avg O2 Partial Pressure at Window (%)',
        'avg_o2_concentration__': 'Avg O2 Concentration (%)',
        'avg_o2_flow__ml_min': 'Avg O2 Flow (ml/min)',
        'estimated_resin_volume__ml': 'Estimated Resin Volume (ml)',
        'slice_thickness__um': 'Slice Thickness (um)',
        'build_height__mm': 'Build Height (mm)',
        'created_at': 'Created At',
        'peak_wavelength__nm': 'Peak Wavelength (nm)',
        'resin_alpha': 'Resin Alpha',
        'resin_dc': 'Resin DC',
        'resin_fc': 'Resin FC',
        'resin_viscosity': 'Resin Viscosity',
        'light_engine_turned_on': 'Light Engine Turned On'
    }

    def __init__(self, print_id=None, printer_id=None, total_slices=None, cassette_name=None, estimated_print_time__ms=None, resin_exposure_compensation=None, base_exposure_multiplier=None, heater_setpoint__c=None, printer_serial=None, project_id=None, print_number=None, software_version=None, printer_name=None, ffb_enabled_print=None, hardware_profile=None, cassette_serial=None, window_serial=None, platform_serial=None, resin_name=None, blackline__um=None, estimated_consumed_resin_volume__ml=None, minimum_required_resin_volume__ml=None, script_name=None, project_name=None, print_finished_status=None, print_alerts=None, started_date_time=None, finished_date_time=None, total_time__min=None, move_time__min=None, exposure_time_total__min=None, total_delay_time__min=None, light_engine_intensity__m_w_cm2=None, current_to_light_engine__m_a=None, avg_o2_partial_pressure_at_window__=None, avg_o2_concentration__=None, avg_o2_flow__ml_min=None, estimated_resin_volume__ml=None, slice_thickness__um=None, build_height__mm=None, created_at=None, peak_wavelength__nm=None, resin_alpha=None, resin_dc=None, resin_fc=None, resin_viscosity=None, light_engine_turned_on=None, local_vars_configuration=None):  # noqa: E501
        """PrintDataQa - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._print_id = None
        self._printer_id = None
        self._total_slices = None
        self._cassette_name = None
        self._estimated_print_time__ms = None
        self._resin_exposure_compensation = None
        self._base_exposure_multiplier = None
        self._heater_setpoint__c = None
        self._printer_serial = None
        self._project_id = None
        self._print_number = None
        self._software_version = None
        self._printer_name = None
        self._ffb_enabled_print = None
        self._hardware_profile = None
        self._cassette_serial = None
        self._window_serial = None
        self._platform_serial = None
        self._resin_name = None
        self._blackline__um = None
        self._estimated_consumed_resin_volume__ml = None
        self._minimum_required_resin_volume__ml = None
        self._script_name = None
        self._project_name = None
        self._print_finished_status = None
        self._print_alerts = None
        self._started_date_time = None
        self._finished_date_time = None
        self._total_time__min = None
        self._move_time__min = None
        self._exposure_time_total__min = None
        self._total_delay_time__min = None
        self._light_engine_intensity__m_w_cm2 = None
        self._current_to_light_engine__m_a = None
        self._avg_o2_partial_pressure_at_window__ = None
        self._avg_o2_concentration__ = None
        self._avg_o2_flow__ml_min = None
        self._estimated_resin_volume__ml = None
        self._slice_thickness__um = None
        self._build_height__mm = None
        self._created_at = None
        self._peak_wavelength__nm = None
        self._resin_alpha = None
        self._resin_dc = None
        self._resin_fc = None
        self._resin_viscosity = None
        self._light_engine_turned_on = None
        self.discriminator = None

        if print_id is not None:
            self.print_id = print_id
        if printer_id is not None:
            self.printer_id = printer_id
        if total_slices is not None:
            self.total_slices = total_slices
        if cassette_name is not None:
            self.cassette_name = cassette_name
        if estimated_print_time__ms is not None:
            self.estimated_print_time__ms = estimated_print_time__ms
        if resin_exposure_compensation is not None:
            self.resin_exposure_compensation = resin_exposure_compensation
        if base_exposure_multiplier is not None:
            self.base_exposure_multiplier = base_exposure_multiplier
        if heater_setpoint__c is not None:
            self.heater_setpoint__c = heater_setpoint__c
        if printer_serial is not None:
            self.printer_serial = printer_serial
        if project_id is not None:
            self.project_id = project_id
        if print_number is not None:
            self.print_number = print_number
        if software_version is not None:
            self.software_version = software_version
        if printer_name is not None:
            self.printer_name = printer_name
        if ffb_enabled_print is not None:
            self.ffb_enabled_print = ffb_enabled_print
        if hardware_profile is not None:
            self.hardware_profile = hardware_profile
        if cassette_serial is not None:
            self.cassette_serial = cassette_serial
        if window_serial is not None:
            self.window_serial = window_serial
        if platform_serial is not None:
            self.platform_serial = platform_serial
        if resin_name is not None:
            self.resin_name = resin_name
        if blackline__um is not None:
            self.blackline__um = blackline__um
        if estimated_consumed_resin_volume__ml is not None:
            self.estimated_consumed_resin_volume__ml = estimated_consumed_resin_volume__ml
        if minimum_required_resin_volume__ml is not None:
            self.minimum_required_resin_volume__ml = minimum_required_resin_volume__ml
        if script_name is not None:
            self.script_name = script_name
        if project_name is not None:
            self.project_name = project_name
        if print_finished_status is not None:
            self.print_finished_status = print_finished_status
        if print_alerts is not None:
            self.print_alerts = print_alerts
        if started_date_time is not None:
            self.started_date_time = started_date_time
        if finished_date_time is not None:
            self.finished_date_time = finished_date_time
        if total_time__min is not None:
            self.total_time__min = total_time__min
        if move_time__min is not None:
            self.move_time__min = move_time__min
        if exposure_time_total__min is not None:
            self.exposure_time_total__min = exposure_time_total__min
        if total_delay_time__min is not None:
            self.total_delay_time__min = total_delay_time__min
        if light_engine_intensity__m_w_cm2 is not None:
            self.light_engine_intensity__m_w_cm2 = light_engine_intensity__m_w_cm2
        if current_to_light_engine__m_a is not None:
            self.current_to_light_engine__m_a = current_to_light_engine__m_a
        if avg_o2_partial_pressure_at_window__ is not None:
            self.avg_o2_partial_pressure_at_window__ = avg_o2_partial_pressure_at_window__
        if avg_o2_concentration__ is not None:
            self.avg_o2_concentration__ = avg_o2_concentration__
        if avg_o2_flow__ml_min is not None:
            self.avg_o2_flow__ml_min = avg_o2_flow__ml_min
        if estimated_resin_volume__ml is not None:
            self.estimated_resin_volume__ml = estimated_resin_volume__ml
        if slice_thickness__um is not None:
            self.slice_thickness__um = slice_thickness__um
        if build_height__mm is not None:
            self.build_height__mm = build_height__mm
        if created_at is not None:
            self.created_at = created_at
        if peak_wavelength__nm is not None:
            self.peak_wavelength__nm = peak_wavelength__nm
        if resin_alpha is not None:
            self.resin_alpha = resin_alpha
        if resin_dc is not None:
            self.resin_dc = resin_dc
        if resin_fc is not None:
            self.resin_fc = resin_fc
        if resin_viscosity is not None:
            self.resin_viscosity = resin_viscosity
        if light_engine_turned_on is not None:
            self.light_engine_turned_on = light_engine_turned_on

    @property
    def print_id(self):
        """Gets the print_id of this PrintDataQa.  # noqa: E501


        :return: The print_id of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._print_id

    @print_id.setter
    def print_id(self, print_id):
        """Sets the print_id of this PrintDataQa.


        :param print_id: The print_id of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._print_id = print_id

    @property
    def printer_id(self):
        """Gets the printer_id of this PrintDataQa.  # noqa: E501


        :return: The printer_id of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._printer_id

    @printer_id.setter
    def printer_id(self, printer_id):
        """Sets the printer_id of this PrintDataQa.


        :param printer_id: The printer_id of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._printer_id = printer_id

    @property
    def total_slices(self):
        """Gets the total_slices of this PrintDataQa.  # noqa: E501


        :return: The total_slices of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._total_slices

    @total_slices.setter
    def total_slices(self, total_slices):
        """Sets the total_slices of this PrintDataQa.


        :param total_slices: The total_slices of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._total_slices = total_slices

    @property
    def cassette_name(self):
        """Gets the cassette_name of this PrintDataQa.  # noqa: E501


        :return: The cassette_name of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._cassette_name

    @cassette_name.setter
    def cassette_name(self, cassette_name):
        """Sets the cassette_name of this PrintDataQa.


        :param cassette_name: The cassette_name of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._cassette_name = cassette_name

    @property
    def estimated_print_time__ms(self):
        """Gets the estimated_print_time__ms of this PrintDataQa.  # noqa: E501


        :return: The estimated_print_time__ms of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._estimated_print_time__ms

    @estimated_print_time__ms.setter
    def estimated_print_time__ms(self, estimated_print_time__ms):
        """Sets the estimated_print_time__ms of this PrintDataQa.


        :param estimated_print_time__ms: The estimated_print_time__ms of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._estimated_print_time__ms = estimated_print_time__ms

    @property
    def resin_exposure_compensation(self):
        """Gets the resin_exposure_compensation of this PrintDataQa.  # noqa: E501


        :return: The resin_exposure_compensation of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._resin_exposure_compensation

    @resin_exposure_compensation.setter
    def resin_exposure_compensation(self, resin_exposure_compensation):
        """Sets the resin_exposure_compensation of this PrintDataQa.


        :param resin_exposure_compensation: The resin_exposure_compensation of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._resin_exposure_compensation = resin_exposure_compensation

    @property
    def base_exposure_multiplier(self):
        """Gets the base_exposure_multiplier of this PrintDataQa.  # noqa: E501


        :return: The base_exposure_multiplier of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._base_exposure_multiplier

    @base_exposure_multiplier.setter
    def base_exposure_multiplier(self, base_exposure_multiplier):
        """Sets the base_exposure_multiplier of this PrintDataQa.


        :param base_exposure_multiplier: The base_exposure_multiplier of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._base_exposure_multiplier = base_exposure_multiplier

    @property
    def heater_setpoint__c(self):
        """Gets the heater_setpoint__c of this PrintDataQa.  # noqa: E501


        :return: The heater_setpoint__c of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._heater_setpoint__c

    @heater_setpoint__c.setter
    def heater_setpoint__c(self, heater_setpoint__c):
        """Sets the heater_setpoint__c of this PrintDataQa.


        :param heater_setpoint__c: The heater_setpoint__c of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._heater_setpoint__c = heater_setpoint__c

    @property
    def printer_serial(self):
        """Gets the printer_serial of this PrintDataQa.  # noqa: E501


        :return: The printer_serial of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._printer_serial

    @printer_serial.setter
    def printer_serial(self, printer_serial):
        """Sets the printer_serial of this PrintDataQa.


        :param printer_serial: The printer_serial of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._printer_serial = printer_serial

    @property
    def project_id(self):
        """Gets the project_id of this PrintDataQa.  # noqa: E501


        :return: The project_id of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this PrintDataQa.


        :param project_id: The project_id of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def print_number(self):
        """Gets the print_number of this PrintDataQa.  # noqa: E501


        :return: The print_number of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._print_number

    @print_number.setter
    def print_number(self, print_number):
        """Sets the print_number of this PrintDataQa.


        :param print_number: The print_number of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._print_number = print_number

    @property
    def software_version(self):
        """Gets the software_version of this PrintDataQa.  # noqa: E501


        :return: The software_version of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this PrintDataQa.


        :param software_version: The software_version of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def printer_name(self):
        """Gets the printer_name of this PrintDataQa.  # noqa: E501


        :return: The printer_name of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._printer_name

    @printer_name.setter
    def printer_name(self, printer_name):
        """Sets the printer_name of this PrintDataQa.


        :param printer_name: The printer_name of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._printer_name = printer_name

    @property
    def ffb_enabled_print(self):
        """Gets the ffb_enabled_print of this PrintDataQa.  # noqa: E501


        :return: The ffb_enabled_print of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._ffb_enabled_print

    @ffb_enabled_print.setter
    def ffb_enabled_print(self, ffb_enabled_print):
        """Sets the ffb_enabled_print of this PrintDataQa.


        :param ffb_enabled_print: The ffb_enabled_print of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._ffb_enabled_print = ffb_enabled_print

    @property
    def hardware_profile(self):
        """Gets the hardware_profile of this PrintDataQa.  # noqa: E501


        :return: The hardware_profile of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._hardware_profile

    @hardware_profile.setter
    def hardware_profile(self, hardware_profile):
        """Sets the hardware_profile of this PrintDataQa.


        :param hardware_profile: The hardware_profile of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._hardware_profile = hardware_profile

    @property
    def cassette_serial(self):
        """Gets the cassette_serial of this PrintDataQa.  # noqa: E501


        :return: The cassette_serial of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._cassette_serial

    @cassette_serial.setter
    def cassette_serial(self, cassette_serial):
        """Sets the cassette_serial of this PrintDataQa.


        :param cassette_serial: The cassette_serial of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._cassette_serial = cassette_serial

    @property
    def window_serial(self):
        """Gets the window_serial of this PrintDataQa.  # noqa: E501


        :return: The window_serial of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._window_serial

    @window_serial.setter
    def window_serial(self, window_serial):
        """Sets the window_serial of this PrintDataQa.


        :param window_serial: The window_serial of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._window_serial = window_serial

    @property
    def platform_serial(self):
        """Gets the platform_serial of this PrintDataQa.  # noqa: E501


        :return: The platform_serial of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._platform_serial

    @platform_serial.setter
    def platform_serial(self, platform_serial):
        """Sets the platform_serial of this PrintDataQa.


        :param platform_serial: The platform_serial of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._platform_serial = platform_serial

    @property
    def resin_name(self):
        """Gets the resin_name of this PrintDataQa.  # noqa: E501


        :return: The resin_name of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._resin_name

    @resin_name.setter
    def resin_name(self, resin_name):
        """Sets the resin_name of this PrintDataQa.


        :param resin_name: The resin_name of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._resin_name = resin_name

    @property
    def blackline__um(self):
        """Gets the blackline__um of this PrintDataQa.  # noqa: E501


        :return: The blackline__um of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._blackline__um

    @blackline__um.setter
    def blackline__um(self, blackline__um):
        """Sets the blackline__um of this PrintDataQa.


        :param blackline__um: The blackline__um of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._blackline__um = blackline__um

    @property
    def estimated_consumed_resin_volume__ml(self):
        """Gets the estimated_consumed_resin_volume__ml of this PrintDataQa.  # noqa: E501


        :return: The estimated_consumed_resin_volume__ml of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._estimated_consumed_resin_volume__ml

    @estimated_consumed_resin_volume__ml.setter
    def estimated_consumed_resin_volume__ml(self, estimated_consumed_resin_volume__ml):
        """Sets the estimated_consumed_resin_volume__ml of this PrintDataQa.


        :param estimated_consumed_resin_volume__ml: The estimated_consumed_resin_volume__ml of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._estimated_consumed_resin_volume__ml = estimated_consumed_resin_volume__ml

    @property
    def minimum_required_resin_volume__ml(self):
        """Gets the minimum_required_resin_volume__ml of this PrintDataQa.  # noqa: E501


        :return: The minimum_required_resin_volume__ml of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._minimum_required_resin_volume__ml

    @minimum_required_resin_volume__ml.setter
    def minimum_required_resin_volume__ml(self, minimum_required_resin_volume__ml):
        """Sets the minimum_required_resin_volume__ml of this PrintDataQa.


        :param minimum_required_resin_volume__ml: The minimum_required_resin_volume__ml of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._minimum_required_resin_volume__ml = minimum_required_resin_volume__ml

    @property
    def script_name(self):
        """Gets the script_name of this PrintDataQa.  # noqa: E501


        :return: The script_name of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._script_name

    @script_name.setter
    def script_name(self, script_name):
        """Sets the script_name of this PrintDataQa.


        :param script_name: The script_name of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._script_name = script_name

    @property
    def project_name(self):
        """Gets the project_name of this PrintDataQa.  # noqa: E501


        :return: The project_name of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this PrintDataQa.


        :param project_name: The project_name of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def print_finished_status(self):
        """Gets the print_finished_status of this PrintDataQa.  # noqa: E501


        :return: The print_finished_status of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._print_finished_status

    @print_finished_status.setter
    def print_finished_status(self, print_finished_status):
        """Sets the print_finished_status of this PrintDataQa.


        :param print_finished_status: The print_finished_status of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._print_finished_status = print_finished_status

    @property
    def print_alerts(self):
        """Gets the print_alerts of this PrintDataQa.  # noqa: E501


        :return: The print_alerts of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._print_alerts

    @print_alerts.setter
    def print_alerts(self, print_alerts):
        """Sets the print_alerts of this PrintDataQa.


        :param print_alerts: The print_alerts of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._print_alerts = print_alerts

    @property
    def started_date_time(self):
        """Gets the started_date_time of this PrintDataQa.  # noqa: E501


        :return: The started_date_time of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._started_date_time

    @started_date_time.setter
    def started_date_time(self, started_date_time):
        """Sets the started_date_time of this PrintDataQa.


        :param started_date_time: The started_date_time of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._started_date_time = started_date_time

    @property
    def finished_date_time(self):
        """Gets the finished_date_time of this PrintDataQa.  # noqa: E501


        :return: The finished_date_time of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._finished_date_time

    @finished_date_time.setter
    def finished_date_time(self, finished_date_time):
        """Sets the finished_date_time of this PrintDataQa.


        :param finished_date_time: The finished_date_time of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._finished_date_time = finished_date_time

    @property
    def total_time__min(self):
        """Gets the total_time__min of this PrintDataQa.  # noqa: E501


        :return: The total_time__min of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._total_time__min

    @total_time__min.setter
    def total_time__min(self, total_time__min):
        """Sets the total_time__min of this PrintDataQa.


        :param total_time__min: The total_time__min of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._total_time__min = total_time__min

    @property
    def move_time__min(self):
        """Gets the move_time__min of this PrintDataQa.  # noqa: E501


        :return: The move_time__min of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._move_time__min

    @move_time__min.setter
    def move_time__min(self, move_time__min):
        """Sets the move_time__min of this PrintDataQa.


        :param move_time__min: The move_time__min of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._move_time__min = move_time__min

    @property
    def exposure_time_total__min(self):
        """Gets the exposure_time_total__min of this PrintDataQa.  # noqa: E501


        :return: The exposure_time_total__min of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._exposure_time_total__min

    @exposure_time_total__min.setter
    def exposure_time_total__min(self, exposure_time_total__min):
        """Sets the exposure_time_total__min of this PrintDataQa.


        :param exposure_time_total__min: The exposure_time_total__min of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._exposure_time_total__min = exposure_time_total__min

    @property
    def total_delay_time__min(self):
        """Gets the total_delay_time__min of this PrintDataQa.  # noqa: E501


        :return: The total_delay_time__min of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._total_delay_time__min

    @total_delay_time__min.setter
    def total_delay_time__min(self, total_delay_time__min):
        """Sets the total_delay_time__min of this PrintDataQa.


        :param total_delay_time__min: The total_delay_time__min of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._total_delay_time__min = total_delay_time__min

    @property
    def light_engine_intensity__m_w_cm2(self):
        """Gets the light_engine_intensity__m_w_cm2 of this PrintDataQa.  # noqa: E501


        :return: The light_engine_intensity__m_w_cm2 of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._light_engine_intensity__m_w_cm2

    @light_engine_intensity__m_w_cm2.setter
    def light_engine_intensity__m_w_cm2(self, light_engine_intensity__m_w_cm2):
        """Sets the light_engine_intensity__m_w_cm2 of this PrintDataQa.


        :param light_engine_intensity__m_w_cm2: The light_engine_intensity__m_w_cm2 of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._light_engine_intensity__m_w_cm2 = light_engine_intensity__m_w_cm2

    @property
    def current_to_light_engine__m_a(self):
        """Gets the current_to_light_engine__m_a of this PrintDataQa.  # noqa: E501


        :return: The current_to_light_engine__m_a of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._current_to_light_engine__m_a

    @current_to_light_engine__m_a.setter
    def current_to_light_engine__m_a(self, current_to_light_engine__m_a):
        """Sets the current_to_light_engine__m_a of this PrintDataQa.


        :param current_to_light_engine__m_a: The current_to_light_engine__m_a of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._current_to_light_engine__m_a = current_to_light_engine__m_a

    @property
    def avg_o2_partial_pressure_at_window__(self):
        """Gets the avg_o2_partial_pressure_at_window__ of this PrintDataQa.  # noqa: E501


        :return: The avg_o2_partial_pressure_at_window__ of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._avg_o2_partial_pressure_at_window__

    @avg_o2_partial_pressure_at_window__.setter
    def avg_o2_partial_pressure_at_window__(self, avg_o2_partial_pressure_at_window__):
        """Sets the avg_o2_partial_pressure_at_window__ of this PrintDataQa.


        :param avg_o2_partial_pressure_at_window__: The avg_o2_partial_pressure_at_window__ of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._avg_o2_partial_pressure_at_window__ = avg_o2_partial_pressure_at_window__

    @property
    def avg_o2_concentration__(self):
        """Gets the avg_o2_concentration__ of this PrintDataQa.  # noqa: E501


        :return: The avg_o2_concentration__ of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._avg_o2_concentration__

    @avg_o2_concentration__.setter
    def avg_o2_concentration__(self, avg_o2_concentration__):
        """Sets the avg_o2_concentration__ of this PrintDataQa.


        :param avg_o2_concentration__: The avg_o2_concentration__ of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._avg_o2_concentration__ = avg_o2_concentration__

    @property
    def avg_o2_flow__ml_min(self):
        """Gets the avg_o2_flow__ml_min of this PrintDataQa.  # noqa: E501


        :return: The avg_o2_flow__ml_min of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._avg_o2_flow__ml_min

    @avg_o2_flow__ml_min.setter
    def avg_o2_flow__ml_min(self, avg_o2_flow__ml_min):
        """Sets the avg_o2_flow__ml_min of this PrintDataQa.


        :param avg_o2_flow__ml_min: The avg_o2_flow__ml_min of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._avg_o2_flow__ml_min = avg_o2_flow__ml_min

    @property
    def estimated_resin_volume__ml(self):
        """Gets the estimated_resin_volume__ml of this PrintDataQa.  # noqa: E501


        :return: The estimated_resin_volume__ml of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._estimated_resin_volume__ml

    @estimated_resin_volume__ml.setter
    def estimated_resin_volume__ml(self, estimated_resin_volume__ml):
        """Sets the estimated_resin_volume__ml of this PrintDataQa.


        :param estimated_resin_volume__ml: The estimated_resin_volume__ml of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._estimated_resin_volume__ml = estimated_resin_volume__ml

    @property
    def slice_thickness__um(self):
        """Gets the slice_thickness__um of this PrintDataQa.  # noqa: E501


        :return: The slice_thickness__um of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._slice_thickness__um

    @slice_thickness__um.setter
    def slice_thickness__um(self, slice_thickness__um):
        """Sets the slice_thickness__um of this PrintDataQa.


        :param slice_thickness__um: The slice_thickness__um of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._slice_thickness__um = slice_thickness__um

    @property
    def build_height__mm(self):
        """Gets the build_height__mm of this PrintDataQa.  # noqa: E501


        :return: The build_height__mm of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._build_height__mm

    @build_height__mm.setter
    def build_height__mm(self, build_height__mm):
        """Sets the build_height__mm of this PrintDataQa.


        :param build_height__mm: The build_height__mm of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._build_height__mm = build_height__mm

    @property
    def created_at(self):
        """Gets the created_at of this PrintDataQa.  # noqa: E501


        :return: The created_at of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PrintDataQa.


        :param created_at: The created_at of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def peak_wavelength__nm(self):
        """Gets the peak_wavelength__nm of this PrintDataQa.  # noqa: E501


        :return: The peak_wavelength__nm of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._peak_wavelength__nm

    @peak_wavelength__nm.setter
    def peak_wavelength__nm(self, peak_wavelength__nm):
        """Sets the peak_wavelength__nm of this PrintDataQa.


        :param peak_wavelength__nm: The peak_wavelength__nm of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._peak_wavelength__nm = peak_wavelength__nm

    @property
    def resin_alpha(self):
        """Gets the resin_alpha of this PrintDataQa.  # noqa: E501


        :return: The resin_alpha of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._resin_alpha

    @resin_alpha.setter
    def resin_alpha(self, resin_alpha):
        """Sets the resin_alpha of this PrintDataQa.


        :param resin_alpha: The resin_alpha of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._resin_alpha = resin_alpha

    @property
    def resin_dc(self):
        """Gets the resin_dc of this PrintDataQa.  # noqa: E501


        :return: The resin_dc of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._resin_dc

    @resin_dc.setter
    def resin_dc(self, resin_dc):
        """Sets the resin_dc of this PrintDataQa.


        :param resin_dc: The resin_dc of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._resin_dc = resin_dc

    @property
    def resin_fc(self):
        """Gets the resin_fc of this PrintDataQa.  # noqa: E501


        :return: The resin_fc of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._resin_fc

    @resin_fc.setter
    def resin_fc(self, resin_fc):
        """Sets the resin_fc of this PrintDataQa.


        :param resin_fc: The resin_fc of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._resin_fc = resin_fc

    @property
    def resin_viscosity(self):
        """Gets the resin_viscosity of this PrintDataQa.  # noqa: E501


        :return: The resin_viscosity of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._resin_viscosity

    @resin_viscosity.setter
    def resin_viscosity(self, resin_viscosity):
        """Sets the resin_viscosity of this PrintDataQa.


        :param resin_viscosity: The resin_viscosity of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._resin_viscosity = resin_viscosity

    @property
    def light_engine_turned_on(self):
        """Gets the light_engine_turned_on of this PrintDataQa.  # noqa: E501


        :return: The light_engine_turned_on of this PrintDataQa.  # noqa: E501
        :rtype: str
        """
        return self._light_engine_turned_on

    @light_engine_turned_on.setter
    def light_engine_turned_on(self, light_engine_turned_on):
        """Sets the light_engine_turned_on of this PrintDataQa.


        :param light_engine_turned_on: The light_engine_turned_on of this PrintDataQa.  # noqa: E501
        :type: str
        """

        self._light_engine_turned_on = light_engine_turned_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrintDataQa):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrintDataQa):
            return True

        return self.to_dict() != other.to_dict()
