# coding: utf-8

"""
    Carbon DLS API

    Welcome to the Carbon DLS API docs!   # noqa: E501

    The version of the OpenAPI document: 0.4.6
    Contact: api-list@carbon3d.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from carbon3d.configuration import Configuration


class BuildSop(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'name': 'str',
        'description': 'str',
        'build_prefix': 'str',
        'resin_name': 'str',
        'print_profile': 'str',
        'release_film': 'bool',
        'layout_profile': 'str',
        'layout_padding_mm': 'int'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'description': 'description',
        'build_prefix': 'build_prefix',
        'resin_name': 'resin_name',
        'print_profile': 'print_profile',
        'release_film': 'release_film',
        'layout_profile': 'layout_profile',
        'layout_padding_mm': 'layout_padding_mm'
    }

    def __init__(self, uuid=None, name=None, description=None, build_prefix='AutoBuild#', resin_name=None, print_profile=None, release_film=None, layout_profile=None, layout_padding_mm=None, local_vars_configuration=None):  # noqa: E501
        """BuildSop - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._name = None
        self._description = None
        self._build_prefix = None
        self._resin_name = None
        self._print_profile = None
        self._release_film = None
        self._layout_profile = None
        self._layout_padding_mm = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        self.name = name
        if description is not None:
            self.description = description
        if build_prefix is not None:
            self.build_prefix = build_prefix
        self.resin_name = resin_name
        self.print_profile = print_profile
        self.release_film = release_film
        self.layout_profile = layout_profile
        self.layout_padding_mm = layout_padding_mm

    @property
    def uuid(self):
        """Gets the uuid of this BuildSop.  # noqa: E501


        :return: The uuid of this BuildSop.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this BuildSop.


        :param uuid: The uuid of this BuildSop.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this BuildSop.  # noqa: E501


        :return: The name of this BuildSop.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildSop.


        :param name: The name of this BuildSop.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this BuildSop.  # noqa: E501


        :return: The description of this BuildSop.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BuildSop.


        :param description: The description of this BuildSop.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def build_prefix(self):
        """Gets the build_prefix of this BuildSop.  # noqa: E501

        Build name prefix to which a unique idenfier is appended  # noqa: E501

        :return: The build_prefix of this BuildSop.  # noqa: E501
        :rtype: str
        """
        return self._build_prefix

    @build_prefix.setter
    def build_prefix(self, build_prefix):
        """Sets the build_prefix of this BuildSop.

        Build name prefix to which a unique idenfier is appended  # noqa: E501

        :param build_prefix: The build_prefix of this BuildSop.  # noqa: E501
        :type: str
        """

        self._build_prefix = build_prefix

    @property
    def resin_name(self):
        """Gets the resin_name of this BuildSop.  # noqa: E501


        :return: The resin_name of this BuildSop.  # noqa: E501
        :rtype: str
        """
        return self._resin_name

    @resin_name.setter
    def resin_name(self, resin_name):
        """Sets the resin_name of this BuildSop.


        :param resin_name: The resin_name of this BuildSop.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resin_name is None:  # noqa: E501
            raise ValueError("Invalid value for `resin_name`, must not be `None`")  # noqa: E501

        self._resin_name = resin_name

    @property
    def print_profile(self):
        """Gets the print_profile of this BuildSop.  # noqa: E501


        :return: The print_profile of this BuildSop.  # noqa: E501
        :rtype: str
        """
        return self._print_profile

    @print_profile.setter
    def print_profile(self, print_profile):
        """Sets the print_profile of this BuildSop.


        :param print_profile: The print_profile of this BuildSop.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and print_profile is None:  # noqa: E501
            raise ValueError("Invalid value for `print_profile`, must not be `None`")  # noqa: E501

        self._print_profile = print_profile

    @property
    def release_film(self):
        """Gets the release_film of this BuildSop.  # noqa: E501


        :return: The release_film of this BuildSop.  # noqa: E501
        :rtype: bool
        """
        return self._release_film

    @release_film.setter
    def release_film(self, release_film):
        """Sets the release_film of this BuildSop.


        :param release_film: The release_film of this BuildSop.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and release_film is None:  # noqa: E501
            raise ValueError("Invalid value for `release_film`, must not be `None`")  # noqa: E501

        self._release_film = release_film

    @property
    def layout_profile(self):
        """Gets the layout_profile of this BuildSop.  # noqa: E501


        :return: The layout_profile of this BuildSop.  # noqa: E501
        :rtype: str
        """
        return self._layout_profile

    @layout_profile.setter
    def layout_profile(self, layout_profile):
        """Sets the layout_profile of this BuildSop.


        :param layout_profile: The layout_profile of this BuildSop.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and layout_profile is None:  # noqa: E501
            raise ValueError("Invalid value for `layout_profile`, must not be `None`")  # noqa: E501
        allowed_values = ["denser", "faster", "skip"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and layout_profile not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `layout_profile` ({0}), must be one of {1}"  # noqa: E501
                .format(layout_profile, allowed_values)
            )

        self._layout_profile = layout_profile

    @property
    def layout_padding_mm(self):
        """Gets the layout_padding_mm of this BuildSop.  # noqa: E501


        :return: The layout_padding_mm of this BuildSop.  # noqa: E501
        :rtype: int
        """
        return self._layout_padding_mm

    @layout_padding_mm.setter
    def layout_padding_mm(self, layout_padding_mm):
        """Sets the layout_padding_mm of this BuildSop.


        :param layout_padding_mm: The layout_padding_mm of this BuildSop.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and layout_padding_mm is None:  # noqa: E501
            raise ValueError("Invalid value for `layout_padding_mm`, must not be `None`")  # noqa: E501

        self._layout_padding_mm = layout_padding_mm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildSop):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BuildSop):
            return True

        return self.to_dict() != other.to_dict()
